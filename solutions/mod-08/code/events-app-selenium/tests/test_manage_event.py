# Generated by Selenium IDE
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as ec

class TestManageEvent():

  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}

  def teardown_method(self, method):
    self.driver.quit()

  def test_manage_event(self):
    wait = WebDriverWait(self.driver, timeout=5)

    # Test name: manage-event
    # Step # | name | target | value
    # 1 | open | http://localhost:10081/selenium/events/index.html |
    self.driver.get("http://localhost:10081/selenium/events/index.html")
    # 2 | setWindowSize | 1291x855 |
    self.driver.set_window_size(1291, 855)
    # 3 | click | id=navbarDropdown |
    self.driver.find_element(By.ID, "navbarDropdown").click()
    # 4 | click | linkText=Create Event |
    self.driver.find_element(By.LINK_TEXT, "Create Event").click()
    # 5 | click | name=ce-description |
    self.driver.find_element(By.NAME, "ce-description").click()
    # 6 | type | name=ce-description | Jackson Twist
    self.driver.find_element(By.NAME, "ce-description").send_keys("Jackson Twist")
    # 7 | click | name=ce-date |
    self.driver.find_element(By.NAME, "ce-date").click()
    # 8 | click | css=tr:nth-child(5) > .day:nth-child(6) |
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(5) > .day:nth-child(6)").click()
    # 9 | click | css=.btn-primary |
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    # 10 | click | css=#eventModal .btn |
    # self.driver.implicitly_wait(2)
    # wait.until(lambda d: ec.element_to_be_clickable((By.CSS_SELECTOR, "#eventModal .btn")))
    time.sleep(2)
    self.driver.find_element(By.CSS_SELECTOR, "#eventModal .btn").click()
    # 11 | click | id=navbarDropdown |
    # self.driver.implicitly_wait(4)
    self.driver.find_element(By.ID, "navbarDropdown").click()
    # 12 | click | linkText=List Events |
    self.driver.find_element(By.LINK_TEXT, "List Events").click()
    # 13 | click | css=.btn-sm |
    self.driver.find_element(By.CSS_SELECTOR, ".btn-sm").click()
    # 14 | click | id=confirmDeleteBtn |
    time.sleep(2)
    self.driver.find_element(By.ID, "confirmDeleteBtn").click()
    # 15 | click | linkText=Home |
    self.driver.find_element(By.LINK_TEXT, "Home").click()
    # 16 | close |  |
    self.driver.close()
